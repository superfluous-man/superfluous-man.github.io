[
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "Baby Logic",
    "section": "",
    "text": "Preface\n「邏輯」有很多種，「邏輯學」也有很多種。不同的人學習邏輯學有不同的目的。本筆記中的「邏輯學」知識主要服務於語言、思維的分析，不追求邏輯學在其他領域的功能。\n本筆記大致列出邏輯基礎學習階段的主要材料，主要參考（chāoxí）以下課本攢集而成：\n其中，直接取自《符號邏輯講義》的材料最多，取自《邏輯學導論》較多，素樸集合論、表列演算則直接取自完全開源的 Open Logic Project 項目源碼。"
  },
  {
    "objectID": "index.html#learning-features",
    "href": "index.html#learning-features",
    "title": "Baby Logic",
    "section": "Learning features",
    "text": "Learning features\n\n\n\n\n\n\nNote\n\n\n\nSometimes other fields might add interested value to the understanding of the computational biology area. This feature remarks some of them and aim to explain these intersections.\n\n\n\n\n\n\n\n\nTip\n\n\n\nAs you move forward in the computational biology field you will find that there are several tips and tricks (mainly from the command line) as well as some random CLI programs that can leverage your daily workflow as a researcher. Using this feature we highlight some of those that appeared to linger on the field.\n\n\n\n\n\n\n\n\nImportant\n\n\n\nTo help you consolidate your understanding we end most chapters with important messages or concepts that help you evaluate yourself as you move forward on the lessons.\n\n\n\n\n\n\n\n\nCaution\n\n\n\nWhen experimenting with the CLI and many other computational tools it is common to face several known errors and drawbacks. Then, we present some of them and how to sort them out.\n\n\n\n\n\n\n\n\nChallenges\n\n\n\nSince focused on a competences learning approach we have highlighted several real-life (but basic) challenges a researcher faces when approaching computational biology problem (from tool selection, usage and result analysis). Therefore the book section challenges presents a selection of these problems that will later be approached by a computational biology strategy (mainly from the CLI).\n\n\n\n\n\n\n\n\n File format\n\n\n\nAs many analysis specialize on data analysis, many formats arise that optimize the processing steps or the data storing steps. Some of these formats are keystones of bioinformatic analyses. We present examples of some formats an describe its main elements."
  },
  {
    "objectID": "index.html#notation",
    "href": "index.html#notation",
    "title": "Baby Logic",
    "section": "Notation",
    "text": "Notation\n\nMathematical notations"
  },
  {
    "objectID": "intro.html#bioinformatics-vs.-computational-biology",
    "href": "intro.html#bioinformatics-vs.-computational-biology",
    "title": "Introduction",
    "section": "Bioinformatics vs. Computational biology",
    "text": "Bioinformatics vs. Computational biology"
  },
  {
    "objectID": "intro.html#the-extent-of-computational-biology",
    "href": "intro.html#the-extent-of-computational-biology",
    "title": "Introduction",
    "section": "The extent of computational biology",
    "text": "The extent of computational biology\nThere so many fields on bioinformarics ?fig-biofields, that sometimes its hard to focus on the fundamentals. But this is also an opportunity to discuss the main aspects and differences across the fields."
  },
  {
    "objectID": "chs-propositional/welcome-to-command-line.html#command-line-basics",
    "href": "chs-propositional/welcome-to-command-line.html#command-line-basics",
    "title": "1  The command line",
    "section": "1.1 Command line basics",
    "text": "1.1 Command line basics\nBefore landing into the CLI let us consider the Unix concept. The first question that comes in this section is : what is Unix ? It simply is an :operating system (OS). In other words, it is a set of programs that inter-operate with each other to let you communicate with the machine. A very important variant (or clone) of Unix is the very well known OS :Linux, which was created by :Linus Torvalds from scratch. The most important idea behind Unix based systems is the idea that we can use it to access information and hardware programmatically. Other main feature from Unix-like OS systems is the fact that data is usually stored as text files and the interface by which users communicate with the machine is also text-based (TUI : text user interface as opposed to GUI, graphic user interface).\n\n\n\nFigure 1.1: A terminal app displaying common features of the command line interface\n\n\nAlmost every computer has a way to interact with or access to the inner elements of the computer. Such interface is called the the command-line-interface Fig. 1.1.\n\n1.1.1 File paths\nPrograms, files and directories on every machine (with Unix-like OS) display hierarchical paths (routes), starting out from the root (represented by the back-slash character /). The root represents the beginning of all the software installed in the machine. And many other files are nested from there forming a tree-like structure for the paths Fig. 1.2\n\n\n\nFigure 1.2: A terminal displaying tree-like structure of the programs in a machine with macOS\n\n\n\n\n\n\n\n\n\nTip\n\n\n\nYou can inspect the paths of a nested directory tree using tree command in you cli :\ntree -d -L 1\n\nThere are basically two ways to explore or navigate your file system. If you always represent it from the root, then you are presenting an absolute path. For instance the absolute path to my desktop is (/Users/camilogarcia/Desktop).\n\n\n1.1.2 Basic Unix commands\nGiven that the vast majority of file systems are organized in file paths, the first question when starting with the CLI is “Where am I ?”. So Unix tool system is equipped with a bunch of commands but its basic ones are pretty much oriented to answer that question and navigating this text-based interface of files. The following three commands (pwd, cd, ls) will help you conquer the CLI.\n\n1.1.2.1 Printing your working directory\nTo know where you are you can see your current location, that is to print your working directory using the pwd command.\npwd\n\n\n1.1.2.2 Change to other directory\ncd test-dir\n\n\n\n\n\n\n\nTip\n\n\n\nSome basic arguments to navigate across your terminal :\ncd .. # change backwards\ncd ~  # change to the home\ncd /  # change to the root\ncd -  # change to previous dir\n\n\n\n1.1.2.3 Listing files\nls \n\n\n\n\n\n\n\nTip\n\n\n\nYou can navigate your executed commands by typing  or .\n\n\n\n1.1.2.4 Making new directories\nmkdir test-dir\n\n\n1.1.2.5 Creating a file\nA simple command to create any file inside your terminal is touch it just create a file, but do not allow any editing.\ntouch new-file.txt\nThe new-file.txt is empty and created on your current location unless you assign another path when creating it. We suggest to take a look at Allison Horst illustrations, especially on how to name files depending on the case see Fig. 1.3\n\n\n\n\n\nFigure 1.3: Different conventions for naming files or directories as a good computational practice. Such as de the kebab-case or the UpperCammelCase. Illustration by Allison Horst\n\n\n\n\n1.1.2.6 Printing files or inputs\ncat new-file.txt\nsome\nlines\nthat\nwere\nwritten\n\necho \"This will be printed\"\n\nThis will be printed\n\n\n\n\n1.1.2.7 Removing files or directories\nrm\n\n\n\n\n\n\n\nTip\n\n\n\nWhen having a long command, it becomes practically to go to the beginning or to the end of it. To do so you can use the key combination Ctrl + A and Ctrl + E respectively.\n\nrmdir\n\n\n\n1.1.3 Anatomy of a command\nThere is still many conventions by which the parts of a command line might be called, yet a very standard convention is presented in Fig. 1.4\n\n\n\nFigure 1.4: A simple command and a convention to call its main components\n\n\nSome other for instance also tend to call the option as flag. This conventions are powerful because almost any command line interface display this structure (complex one add some other features and simple one tend to lack subcommands).\n\n\n\n\n\n\nChallenge\n\n\n\n\n\nBacterial defense mechanisms to avoid bacteriophage infections are abundant. One of these is the :restriction-modification system (RM-System), which works by targeting a specific sites called motifs, shared by the phage and bacteria, with methylations. Motifs are commonly represented as a :sequence logo which is a probabilistic representation of the nucleotides at each position. The challenge consists of finding the number of times the motif from Fig. 1.5 appears on B. tequilensis EA-CB0015 genome using a command. Assume that probabilities are equal when multiple bases appeared at one site.\n\n\n\nFigure 1.5: A RM-system motif logo\n\n\nBefore diving into an :answer take your time to think and solve it by your own."
  },
  {
    "objectID": "chs-propositional/welcome-to-command-line.html#most-important-skills",
    "href": "chs-propositional/welcome-to-command-line.html#most-important-skills",
    "title": "1  The command line",
    "section": "1.2 Most important skills",
    "text": "1.2 Most important skills\nWhen facing the CLI several issues or problems will arise. As for any other unintuitive challenge, a complete text interface Handling errors. Getting help Patience"
  },
  {
    "objectID": "chs-propositional/welcome-to-command-line.html#intermediate-unix",
    "href": "chs-propositional/welcome-to-command-line.html#intermediate-unix",
    "title": "1  The command line",
    "section": "1.3 Intermediate Unix",
    "text": "1.3 Intermediate Unix\n\n1.3.1 Special operators or metacharacters\nSome operator or metacharacters have special functions in bash. For instance the * or wildcard is a regular expression character (sometimes called as a placeholder) that will turn in any character, many times, similarly the ? represents any character, once. Whereas the $ (dollar sign or operator) is intended for an special task : call environmental variables which means that once a variable is defined (e.g., var=1) this variable can be called via the $ operator anytime echo $var will get us 1 as the standard output\n\n\n1.3.2 Intermediate commands\nwc\ntr\ngrep \nsed \n\n\n1.3.3 Unix flows\n\n\n\n\n\n\n\nTip\n\n\n\nWhen using the CLI at first its common to feal quite slow. Then, a very useful tip to boost the productivity from the command line is the autocompletion of commands by hitting &lt;tab&gt; after the initial command.\n\n\n1.3.3.1 Redirection\n\n\n\nRedirecting flow\n\n\n\n\n1.3.3.2 Pipe\n\n\n\nPipe flow\n\n\n\n\n\n\n\n\n\nTip\n\n\n\nWhen having a long command, it is also useful to jump by lines instead of character by character. To do so you can use the key combination Alt + &lt;- and Alt + -&gt; respectively.\n\n\n\n\n1.3.4 loops, conditionals and script variables\n\n\n\n\n\n\nChallenge\n\n\n\n\n\nA second part of this challenges consists of create a script out from r the motif-search one-line command that recursively search the motifs in all genomes from a zip file that contains 10 bacterial genomes. The script should include the shebang, loops, conditionals and environmental variables.\nSee a possible script that solve the challenge :here"
  },
  {
    "objectID": "chs-propositional/welcome-to-command-line.html#advance-unix-stuff",
    "href": "chs-propositional/welcome-to-command-line.html#advance-unix-stuff",
    "title": "1  The command line",
    "section": "1.4 Advance Unix stuff",
    "text": "1.4 Advance Unix stuff\n\n1.4.1 System permissions\n\n\n1.4.2 Aliasing\n\n\n1.4.3 The .bashrc\n\n\n1.4.4 awk snippet\n\n\n\n\n\n\nChallenge\n\n\n\n\n\n:Restriction endonucleases (RE) cleave the DNA by digesting the :phosphodiester bond between two nucleotides. Many RE are directed to specific DNA motifs normally palindromic. There are mainly three types according to it digestive mechanism. RE have been widely used in molecular biotechnology because its specificity and versatility to carry out different experiments.\nOne of the main uses of RE is to generate a pattern of restricted fragments from different organisms so that samples of organisms, sequences or genes could be distinguished, as long as they display differences in the number of recognition motifs. This is normally done in the lab, where an RE is mixed with a DNA sample and later an :electrophoresis gel is run to see a separation pattern according to the fragments size.\nProfessor Javier has sequenced the genome of a sampled SARS-CoV2 and want to see the band pattern that the genome would display if it were digested with the RE EcoRV. He has asked you to help him with this problem. The expected output is a text file with the sizes of the fragments, where the size is the number of nucleotides of each fragment.\n\n\n\nFor more explanations on the basic commands in the command line we suggest to visit the first chapters of Computing skills for biologist from Allesina & Wilmes (2019)\nA list of reading for this section :\nDudley & Butte (2009)\nPerkel et al. (2021)\nBrandies & Hogg (2021)\n\n\n\n\nAllesina, S., & Wilmes, M. (2019). Computing skills for biologists. https://doi.org/10.2307/j.ctvc77jrc\n\n\nBrandies, P. A., & Hogg, C. J. (2021). Ten simple rules for getting started with command-line bioinformatics. In PLoS Computational Biology (No. 2; Vol. 17, p. e1008645). Public Library of Science San Francisco, CA USA.\n\n\nDudley, J. T., & Butte, A. J. (2009). A quick guide for developing effective bioinformatics programming skills. In PLOS computational biology (No. 12; Vol. 5, p. e1000589). Public Library of Science San Francisco, USA.\n\n\nPerkel, J. M. et al. (2021). Five reasons why researchers should learn to love the command line. Nature, 590(7844), 173–174."
  },
  {
    "objectID": "chs-predicate/algorithm-thinking.html#what-is-an-algorithm",
    "href": "chs-predicate/algorithm-thinking.html#what-is-an-algorithm",
    "title": "2  Algorithm thinking",
    "section": "2.1 What is an algorithm",
    "text": "2.1 What is an algorithm"
  },
  {
    "objectID": "chs-predicate/algorithm-thinking.html#solving-a-problem-step-by-step",
    "href": "chs-predicate/algorithm-thinking.html#solving-a-problem-step-by-step",
    "title": "2  Algorithm thinking",
    "section": "2.2 Solving a problem step by step",
    "text": "2.2 Solving a problem step by step"
  },
  {
    "objectID": "chs-predicate/algorithm-thinking.html#algorithms-in-computing",
    "href": "chs-predicate/algorithm-thinking.html#algorithms-in-computing",
    "title": "2  Algorithm thinking",
    "section": "2.3 Algorithms in computing",
    "text": "2.3 Algorithms in computing"
  },
  {
    "objectID": "chs-predicate/algorithm-thinking.html#relevance-in-biology",
    "href": "chs-predicate/algorithm-thinking.html#relevance-in-biology",
    "title": "2  Algorithm thinking",
    "section": "2.4 Relevance in biology",
    "text": "2.4 Relevance in biology"
  },
  {
    "objectID": "chs-predicate/algorithm-thinking.html#pseudocode-and-notations",
    "href": "chs-predicate/algorithm-thinking.html#pseudocode-and-notations",
    "title": "2  Algorithm thinking",
    "section": "2.5 Pseudocode and notations",
    "text": "2.5 Pseudocode and notations"
  },
  {
    "objectID": "HISTORY.html#edition-0.0.11-2023-01-19",
    "href": "HISTORY.html#edition-0.0.11-2023-01-19",
    "title": "History",
    "section": "Edition 0.0.11 (2023-01-19)",
    "text": "Edition 0.0.11 (2023-01-19)\n\nAdding some quarto code annotations !\nNew chapter on algorithms\nAdd a challenge on genome assembly\nRendering with Q v.1.3"
  },
  {
    "objectID": "HISTORY.html#edition-0.0.10-2022-12-17",
    "href": "HISTORY.html#edition-0.0.10-2022-12-17",
    "title": "History",
    "section": "Edition 0.0.10 (2022-12-17)",
    "text": "Edition 0.0.10 (2022-12-17)\n\nUpdate book with new quarto and extension versions\nChallenge on sequence alignment\nExperimenting new covers\nSome typos cleaning\nChange giscus theme"
  },
  {
    "objectID": "HISTORY.html#edition-0.0.9-2022-09-08",
    "href": "HISTORY.html#edition-0.0.9-2022-09-08",
    "title": "History",
    "section": "Edition 0.0.9 (2022-09-08)",
    "text": "Edition 0.0.9 (2022-09-08)\n\nStarting the Sanger chapter\nMore on Seq. analysis\nKeep history on book and add dates\nChange the cover\nAdd new parts and chapters outlines (phylogenetics and metagenomics)\nNew challenges on seq analysis solved"
  },
  {
    "objectID": "HISTORY.html#ed.-0.0.8-2022-08-29",
    "href": "HISTORY.html#ed.-0.0.8-2022-08-29",
    "title": "History",
    "section": "Ed. 0.0.8 (2022-08-29)",
    "text": "Ed. 0.0.8 (2022-08-29)\n\nNew render w/ Quarto 1.1\nAdding more on sequence analysis\nIncluding new extension for videos\nImprove some images\nBook has now Giscus to enable discussions\nNew info on download genomics data\nNew foot page with license and more info"
  },
  {
    "objectID": "HISTORY.html#ed.-0.0.7-2022-08-19",
    "href": "HISTORY.html#ed.-0.0.7-2022-08-19",
    "title": "History",
    "section": "Ed. 0.0.7 (2022-08-19)",
    "text": "Ed. 0.0.7 (2022-08-19)\n\nChanges in git chapter\nMore images in different chapters\nStart using new filters : lightbox for images and nutshell for expandable explanations\nSome images in HPC chapter\nSome outlines in Package manager chapter\nSome paragraphs on the sequence analysis chapter\nAdditional challenges"
  },
  {
    "objectID": "HISTORY.html#ed.-0.0.6-2022-08-09",
    "href": "HISTORY.html#ed.-0.0.6-2022-08-09",
    "title": "History",
    "section": "Ed. 0.0.6 (2022-08-09)",
    "text": "Ed. 0.0.6 (2022-08-09)\n\nMore updates to CLI chapter.\nUpdate the Version Control chapter.\nDecoupled genome annotation section into separate chapter.\nAdd a motif search challenge\nAdd cover image\nMany typos corrected."
  },
  {
    "objectID": "HISTORY.html#ed.-0.0.5-2022-07-28",
    "href": "HISTORY.html#ed.-0.0.5-2022-07-28",
    "title": "History",
    "section": "Ed. 0.0.5 (2022-07-28)",
    "text": "Ed. 0.0.5 (2022-07-28)\n\nUpdate CLI chapter.\nDecoupled Seq analysis and Genomics into separate chapters.\nChapters were reorganized in its own dirs to make easier navigation. They also were renamed for later easier addition of other chapters.\nNew learning features using Quarto callouts. This will hopefully improve learning and enjoy the book.\nChapters sections will have numbering."
  },
  {
    "objectID": "HISTORY.html#ed.-0.0.4-2022-04-24",
    "href": "HISTORY.html#ed.-0.0.4-2022-04-24",
    "title": "History",
    "section": "Ed. 0.0.4 (2022-04-24)",
    "text": "Ed. 0.0.4 (2022-04-24)\n\nMinor typos and outline for the structural biology section\nStart improving crossreferences"
  },
  {
    "objectID": "HISTORY.html#ed.-0.0.3-2022-04-18",
    "href": "HISTORY.html#ed.-0.0.3-2022-04-18",
    "title": "History",
    "section": "Ed. 0.0.3 (2022-04-18)",
    "text": "Ed. 0.0.3 (2022-04-18)\n\nCitation and reference of the book is now almost complete"
  },
  {
    "objectID": "HISTORY.html#ed.-0.0.2-2022-04-17",
    "href": "HISTORY.html#ed.-0.0.2-2022-04-17",
    "title": "History",
    "section": "Ed. 0.0.2 (2022-04-17)",
    "text": "Ed. 0.0.2 (2022-04-17)\n\nThis Ed. includes more information of the book and author\nAdds DOI and Zenodo\nIncludes Social commenting"
  },
  {
    "objectID": "HISTORY.html#ed.-0.0.1-2022-04-12",
    "href": "HISTORY.html#ed.-0.0.1-2022-04-12",
    "title": "History",
    "section": "Ed. 0.0.1 (2022-04-12)",
    "text": "Ed. 0.0.1 (2022-04-12)\n\nThis preliminary Ed. contains the basic outline of the book\nContains the first draft solutions to challenges demos"
  },
  {
    "objectID": "references.html",
    "href": "references.html",
    "title": "Bibliographie",
    "section": "",
    "text": "Allesina, S., & Wilmes, M. (2019). Computing skills for\nbiologists. https://doi.org/10.2307/j.ctvc77jrc\n\n\nBrandies, P. A., & Hogg, C. J. (2021). Ten simple rules for getting\nstarted with command-line bioinformatics. In PLoS Computational\nBiology (No. 2; Vol. 17, p. e1008645). Public Library of Science\nSan Francisco, CA USA.\n\n\nDudley, J. T., & Butte, A. J. (2009). A quick guide for developing\neffective bioinformatics programming skills. In PLOS computational\nbiology (No. 12; Vol. 5, p. e1000589). Public Library of Science\nSan Francisco, USA.\n\n\nPerkel, J. M. et al. (2021). Five reasons why researchers should learn\nto love the command line. Nature, 590(7844), 173–174."
  }
]