[
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "Baby Logic",
    "section": "",
    "text": "Preface\n「邏輯」有很多種，「邏輯學」也有很多種。不同的人學習邏輯學有不同的目的。本筆記中的「邏輯學」知識主要服務於語言、思維的分析，不追求邏輯學在其他領域的功能。\n本筆記大致列出邏輯基礎學習階段的主要材料，主要參考（chāoxí）以下課本攢集而成：\n其中，直接取自《符號邏輯講義》的材料最多，取自《邏輯學導論》較多，素樸集合論、表列演算則直接取自完全開源的 Open Logic Project 項目源碼。"
  },
  {
    "objectID": "index.html#learning-features",
    "href": "index.html#learning-features",
    "title": "Baby Logic",
    "section": "Learning features",
    "text": "Learning features\n\n\n\n\n\n\nNote\n\n\n\nSometimes other fields might add interested value to the understanding of the computational biology area. This feature remarks some of them and aim to explain these intersections.\n\n\n\n\n\n\n\n\nTip\n\n\n\nAs you move forward in the computational biology field you will find that there are several tips and tricks (mainly from the command line) as well as some random CLI programs that can leverage your daily workflow as a researcher. Using this feature we highlight some of those that appeared to linger on the field.\n\n\n\n\n\n\n\n\nImportant\n\n\n\nTo help you consolidate your understanding we end most chapters with important messages or concepts that help you evaluate yourself as you move forward on the lessons.\n\n\n\n\n\n\n\n\nCaution\n\n\n\nWhen experimenting with the CLI and many other computational tools it is common to face several known errors and drawbacks. Then, we present some of them and how to sort them out.\n\n\n\n\n\n\n\n\nChallenges\n\n\n\nSince focused on a competences learning approach we have highlighted several real-life (but basic) challenges a researcher faces when approaching computational biology problem (from tool selection, usage and result analysis). Therefore the book section challenges presents a selection of these problems that will later be approached by a computational biology strategy (mainly from the CLI).\n\n\n\n\n\n\n\n\n File format\n\n\n\nAs many analysis specialize on data analysis, many formats arise that optimize the processing steps or the data storing steps. Some of these formats are keystones of bioinformatic analyses. We present examples of some formats an describe its main elements."
  },
  {
    "objectID": "index.html#notation",
    "href": "index.html#notation",
    "title": "Baby Logic",
    "section": "Notation",
    "text": "Notation\n\nMathematical notations"
  },
  {
    "objectID": "intro.html#bioinformatics-vs.-computational-biology",
    "href": "intro.html#bioinformatics-vs.-computational-biology",
    "title": "Introduction",
    "section": "Bioinformatics vs. Computational biology",
    "text": "Bioinformatics vs. Computational biology"
  },
  {
    "objectID": "intro.html#the-extent-of-computational-biology",
    "href": "intro.html#the-extent-of-computational-biology",
    "title": "Introduction",
    "section": "The extent of computational biology",
    "text": "The extent of computational biology\nThere so many fields on bioinformarics Fig. 1, that sometimes its hard to focus on the fundamentals. But this is also an opportunity to discuss the main aspects and differences across the fields.\n\n\n\nFigure 1: Different areas on bioinfomatics"
  },
  {
    "objectID": "chs-propositional/welcome-to-command-line.html#command-line-basics",
    "href": "chs-propositional/welcome-to-command-line.html#command-line-basics",
    "title": "1  The command line",
    "section": "\n1.1 Command line basics",
    "text": "1.1 Command line basics\nBefore landing into the CLI let us consider the Unix concept. The first question that comes in this section is: what is Unix? It simply is an :operating system (OS). In other words, it is a set of programs that inter-operate with each other to let you communicate with the machine. A very important variant (or clone) of Unix is the very well known OS :Linux, which was created by :Linus Torvalds from scratch. The most important idea behind Unix based systems is the idea that we can use it to access information and hardware programmatically. Other main feature from Unix-like OS systems is the fact that data is usually stored as text files and the interface by which users communicate with the machine is also text-based (TUI: text user interface as opposed to GUI, graphic user interface).\n\n\nA terminal app displaying common features of the command line interface\n\n\nAlmost every computer has a way to interact with or access to the inner elements of the computer. Such interface is called the the command-line-interface ?fig-terminal.\n\n1.1.1 File paths\nPrograms, files and directories on every machine (with Unix-like OS) display hierarchical paths (routes), starting out from the root (represented by the back-slash character /). The root represents the beginning of all the software installed in the machine. And many other files are nested from there forming a tree-like structure for the paths ?fig-tree\n\n\nA terminal displaying tree-like structure of the programs in a machine with macOS\n\n\n\n\n\n\n\n\n\nTip\n\n\n\nYou can inspect the paths of a nested directory tree using tree command in you cli:\ntree -d -L 1\n\nThere are basically two ways to explore or navigate your file system. If you always represent it from the root, then you are presenting an absolute path. For instance the absolute path to my desktop is (/Users/camilogarcia/Desktop).\n\n1.1.2 Basic Unix commands\nGiven that the vast majority of file systems are organized in file paths, the first question when starting with the CLI is “Where am I?”. So Unix tool system is equipped with a bunch of commands but its basic ones are pretty much oriented to answer that question and navigating this text-based interface of files. The following three commands (pwd, cd, ls) will help you conquer the CLI.\n\n1.1.2.1 Printing your working directory\nTo know where you are you can see your current location, that is to print your working directory using the pwd command.\npwd\n\n1.1.2.2 Change to other directory\ncd test-dir\n\n\n\n\n\n\n\nTip\n\n\n\nSome basic arguments to navigate across your terminal:\ncd .. # change backwards\ncd ~  # change to the home\ncd /  # change to the root\ncd -  # change to previous dir\n\n\n1.1.2.3 Listing files\nls \n\n\n\n\n\n\n\nTip\n\n\n\nYou can navigate your executed commands by typing  or .\n\n\n1.1.2.4 Making new directories\nmkdir test-dir\n\n1.1.2.5 Creating a file\nA simple command to create any file inside your terminal is touch it just create a file, but do not allow any editing.\ntouch new-file.txt\nThe new-file.txt is empty and created on your current location unless you assign another path when creating it. We suggest to take a look at Allison Horst illustrations, especially on how to name files depending on the case see ?fig-naming-files\n\n\n\n\nDifferent conventions for naming files or directories as a good computational practice. Such as de the kebab-case or the UpperCammelCase. Illustration by Allison Horst\n\n\n\n1.1.2.6 Printing files or inputs\ncat new-file.txt\nsome\nlines\nthat\nwere\nwritten\n\necho \"This will be printed\"\n\nThis will be printed\n\n\n\n1.1.2.7 Removing files or directories\nrm\n\n\n\n\n\n\n\nTip\n\n\n\nWhen having a long command, it becomes practically to go to the beginning or to the end of it. To do so you can use the key combination Ctrl + A and Ctrl + E respectively.\n\nrmdir\n\n1.1.3 Anatomy of a command\nThere is still many conventions by which the parts of a command line might be called, yet a very standard convention is presented in ?fig-command\n\n\nA simple command and a convention to call its main components\n\n\nSome other for instance also tend to call the option as flag. This conventions are powerful because almost any command line interface display this structure (complex one add some other features and simple one tend to lack subcommands).\n\n\n\n\n\n\nChallenge\n\n\n\n\n\nBacterial defense mechanisms to avoid bacteriophage infections are abundant. One of these is the :restriction-modification system (RM-System), which works by targeting a specific sites called motifs, shared by the phage and bacteria, with methylations. Motifs are commonly represented as a :sequence logo which is a probabilistic representation of the nucleotides at each position. The challenge consists of finding the number of times the motif from ?fig-motif appears on B. tequilensis EA-CB0015 genome using a command. Assume that probabilities are equal when multiple bases appeared at one site.\n\n\nA RM-system motif logo\n\n\nBefore diving into an :answer take your time to think and solve it by your own."
  },
  {
    "objectID": "chs-propositional/welcome-to-command-line.html#most-important-skills",
    "href": "chs-propositional/welcome-to-command-line.html#most-important-skills",
    "title": "1  The command line",
    "section": "\n1.2 Most important skills",
    "text": "1.2 Most important skills\nWhen facing the CLI several issues or problems will arise. As for any other unintuitive challenge, a complete text interface Handling errors. Getting help Patience"
  },
  {
    "objectID": "chs-propositional/welcome-to-command-line.html#intermediate-unix",
    "href": "chs-propositional/welcome-to-command-line.html#intermediate-unix",
    "title": "1  The command line",
    "section": "\n1.3 Intermediate Unix",
    "text": "1.3 Intermediate Unix\n\n1.3.1 Special operators or metacharacters\nSome operator or metacharacters have special functions in bash. For instance the * or wildcard is a regular expression character (sometimes called as a placeholder) that will turn in any character, many times, similarly the ? represents any character, once. Whereas the $ (dollar sign or operator) is intended for an special task: call environmental variables which means that once a variable is defined (e.g., var=1) this variable can be called via the $ operator anytime echo $var will get us 1 as the standard output\n\n1.3.2 Intermediate commands\nwc\ntr\ngrep \nsed \n\n1.3.3 Unix flows\n\n\n\n\n\n\n\nTip\n\n\n\nWhen using the CLI at first its common to feal quite slow. Then, a very useful tip to boost the productivity from the command line is the autocompletion of commands by hitting &lt;tab&gt; after the initial command.\n\n\n1.3.3.1 Redirection\n\n\nRedirecting flow\n\n\n\n1.3.3.2 Pipe\n\n\nPipe flow\n\n\n\n\n\n\n\n\n\nTip\n\n\n\nWhen having a long command, it is also useful to jump by lines instead of character by character. To do so you can use the key combination Alt + &lt;- and Alt + -&gt; respectively.\n\n\n1.3.4 loops, conditionals and script variables\n\n\n\n\n\n\nChallenge\n\n\n\n\n\nA second part of this challenges consists of create a script out from r the motif-search one-line command that recursively search the motifs in all genomes from a zip file that contains 10 bacterial genomes. The script should include the shebang, loops, conditionals and environmental variables.\nSee a possible script that solve the challenge :here"
  },
  {
    "objectID": "chs-propositional/welcome-to-command-line.html#advance-unix-stuff",
    "href": "chs-propositional/welcome-to-command-line.html#advance-unix-stuff",
    "title": "1  The command line",
    "section": "\n1.4 Advance Unix stuff",
    "text": "1.4 Advance Unix stuff\n\n1.4.1 System permissions\n\n1.4.2 Aliasing\n\n1.4.3 The .bashrc\n\n\n1.4.4 awk snippet\n\n\n\n\n\n\nChallenge\n\n\n\n\n\n:Restriction endonucleases (RE) cleave the DNA by digesting the :phosphodiester bond between two nucleotides. Many RE are directed to specific DNA motifs normally palindromic. There are mainly three types according to it digestive mechanism. RE have been widely used in molecular biotechnology because its specificity and versatility to carry out different experiments.\nOne of the main uses of RE is to generate a pattern of restricted fragments from different organisms so that samples of organisms, sequences or genes could be distinguished, as long as they display differences in the number of recognition motifs. This is normally done in the lab, where an RE is mixed with a DNA sample and later an :electrophoresis gel is run to see a separation pattern according to the fragments size.\nProfessor Javier has sequenced the genome of a sampled SARS-CoV2 and want to see the band pattern that the genome would display if it were digested with the RE EcoRV. He has asked you to help him with this problem. The expected output is a text file with the sizes of the fragments, where the size is the number of nucleotides of each fragment.\n\n\n\nFor more explanations on the basic commands in the command line we suggest to visit the first chapters of Computing skills for biologist from Allesina & Wilmes (2019)\nA list of reading for this section:\nDudley & Butte (2009)\nPerkel et al. (2021)\nBrandies & Hogg (2021)\n\n\n\n\nAllesina, S., & Wilmes, M. (2019). Computing skills for biologists. https://doi.org/10.2307/j.ctvc77jrc\n\n\nBrandies, P. A., & Hogg, C. J. (2021). Ten simple rules for getting started with command-line bioinformatics. In PLoS Computational Biology (No. 2; Vol. 17, p. e1008645). Public Library of Science San Francisco, CA USA.\n\n\nDudley, J. T., & Butte, A. J. (2009). A quick guide for developing effective bioinformatics programming skills. In PLOS computational biology (No. 12; Vol. 5, p. e1000589). Public Library of Science San Francisco, USA.\n\n\nPerkel, J. M. et al. (2021). Five reasons why researchers should learn to love the command line. Nature, 590(7844), 173–174."
  },
  {
    "objectID": "chs-propositional/git-and-github.html#version-control-systems",
    "href": "chs-propositional/git-and-github.html#version-control-systems",
    "title": "2  Version control",
    "section": "\n2.1 Version control systems",
    "text": "2.1 Version control systems\nAs its name suggests, a version control system (VCS) allow you to keep record of the changes happening while working files and directories. Several VCSs have been created but the most popular is git. It is characterized by being a distributed VCS, which means that changes history are recorded locally (whether in a user laptop or user account) in contrast to other centralized VCSs that changes are saved on a shared machine or server.\nSo, why bother to learn a VCS in bioinformatics? Well there are many reasons, but to highlight some of them: i) Since VCSs allow you to record changes, you can always trace back the steps made in ana analysis, which is nice for the reproducibility of your work. ii) a system like git could be coupled with a shared-centralized server as it is GitHub (we’ll talk about it later and then one could share and collaborate, expanding the extent of your research and iii) following the structures and command from git its at first overwhelming and demands consistency and order, then when scaling a project it will payoff this stepping curve of learning by keeping the efficiency of your work."
  },
  {
    "objectID": "chs-propositional/git-and-github.html#git-installation-and-configuration",
    "href": "chs-propositional/git-and-github.html#git-installation-and-configuration",
    "title": "2  Version control",
    "section": "\n2.2 Git installation and configuration",
    "text": "2.2 Git installation and configuration\nInstallation could proceed from the official page of git. If working from WSL it has the binaries preinstalled, so you can jump directly to the configuration. The second step is to configure your user name and an email. with the following lines:\n\ngit config --global user.name \"Your Name\"\ngit config --global user.email user@eafit.edu.co\n\nYou could always user the preferred e-mail. More configurations are available, for instance the preferred editor to work with and so on, you can explore by asking for help git config --help or git config --list.\n\n2.2.1 The basics\nThere are at least six basic commands. Three of them allow recording local changes (git init, git add and git commit) and the other three help you to inspect the state of the changes (git status, git diff and git log), we will dive into the detail in the following lines. So, to start recording changes in a directory you must initialize the directory (which will now be called repository) using git init. This is a one-time command to get started.\n\n2.2.2 The local workflow\n\n\nLocal workflow of a git project adding and committing changes\n\n\n#local-workflow"
  },
  {
    "objectID": "chs-propositional/git-and-github.html#exploring-github",
    "href": "chs-propositional/git-and-github.html#exploring-github",
    "title": "2  Version control",
    "section": "\n2.3 Exploring GitHub",
    "text": "2.3 Exploring GitHub\nAs mention before, one of the great advantages that git can later achieve is to collaborate. However, to get into that a sharable server must allow users to have a common ground, and this is what GitHub allow. GitHub is a web platform where the local repositories become public and any user can access to the controlled versions of an image of your repo. The famous pet is the octocat ?fig-octocat\n\n\n\nThe octocat from GitHub\n\nTo enable the communication with a remote repo, git has encoded many specific commands, once the repos are cloned a simple workflow from the own local and remote repos is made possible thanks to two simple commands git push and git pull.\nThere a several ways to starting out a remote project, whether it starts from a local folder or whether it starts from a remote repo. The second strategy is sometimes easier as you just need to later git clone the remote into a local folder. To do so every repo has its own code-icon  to later copy the repo link and later hit git clone &lt;https...&gt; on the desired folder. Now you got a linked copy of the remote on your machine.\n\n\n\n\n\n\nCaution\n\n\n\nBut before working on a remote and pushing your first commits, it is common to find an error regarding the remote branch (also called origin). There are several ways to avoid this caveat, but a very anticipated way is to configure git\n\ngit config --global push.autoSetupRemote true\n\nThis will save you from every time typing git push --set-upstream origin &lt;main&gt; when working on a new remote repo.\n\n\n\n\nThe cloning workflow in brief\n\n\nCloning is therefore the process of creating a local copy of remote repository, that is a machine version of the remote repo, later all the common local workflow is carried out normally ?fig-cloning\n\n\n\n\n\n\n\nTip\n\n\n\nIf you want to keep a file out of synchronization git provides a simple way to do so by creating a .gitignore file having the the paths to the files to keep in your local machine\n\n\n2.3.1 Forking and collaborate\nBasic collaboration on an open repository is a three-step process. First you need to fork the repo, this will create a mirror copy of the repo in your GitHub profile. In a second step, a simple clone of the repo will generate a copy of the forked repo on your local machine, so you can freely work and make your mistakes and push them to your forked repo that belongs to your account. In a third step, once they are on the remote repo you will have to create a pull request (PR), as its name suggest: you are asking the owners of the original to consider your changes ?fig-forking.\n\n\nA common collaborative workflow from GitHub, using fork, clone and pull requests\n\n\n\n2.3.2 Branching and merging"
  },
  {
    "objectID": "chs-propositional/package-managers.html#what-is-the-importance-of-package-managers",
    "href": "chs-propositional/package-managers.html#what-is-the-importance-of-package-managers",
    "title": "3  Package managers",
    "section": "\n3.1 What is the importance of package managers",
    "text": "3.1 What is the importance of package managers"
  },
  {
    "objectID": "chs-propositional/package-managers.html#conda-environments",
    "href": "chs-propositional/package-managers.html#conda-environments",
    "title": "3  Package managers",
    "section": "\n3.2 Conda environments",
    "text": "3.2 Conda environments\nWhat is conda:\nTo install conda (the command), miniconda (the lighter distribution).\nFor Linux x86_64 machine\n\ncurl -O https://repo.anaconda.com/miniconda/Miniconda3-latest-Linux-x86_64.sh\n\nFor Mac (Intel, will also works on M1):\n\ncurl -O https://repo.anaconda.com/miniconda/Miniconda3-latest-MacOSX-x86_64.sh\n\nOnce downloaded, the next step is to run the installation script.\n\nbash Miniconda3-latest-Linux-x86_64.sh\n\nAfter installation is completed, it is recommended to add the following channels to your conda configuration. Conda channels are…\n\nconda config --add channels defaults\nconda config --add channels bioconda\nconda config --add channels conda-forge\n\nAfter this, conda should be installed, you may need to restart your terminal.\n\n\n\n\n\n\nTip\n\n\n\nA faster implementation of the conda command is mamba. To install it simply run conda install mamba and then every time you will install a program just substitute conda for mamba"
  },
  {
    "objectID": "chs-propositional/package-managers.html#package-managers-for-os",
    "href": "chs-propositional/package-managers.html#package-managers-for-os",
    "title": "3  Package managers",
    "section": "\n3.3 Package managers for OS",
    "text": "3.3 Package managers for OS\nThere are several package managers handling general purpose packages and apps. For MacOS the famous one is Homebrew and for Windows several could be used such as Chocolatey and Scoop."
  },
  {
    "objectID": "chs-propositional/hpc-notions.html#monitoring-my-computer",
    "href": "chs-propositional/hpc-notions.html#monitoring-my-computer",
    "title": "4  Notions of HPC",
    "section": "4.1 Monitoring my computer",
    "text": "4.1 Monitoring my computer\nWhat is computer doing?\nhtop"
  },
  {
    "objectID": "chs-propositional/hpc-notions.html#serial-computing",
    "href": "chs-propositional/hpc-notions.html#serial-computing",
    "title": "4  Notions of HPC",
    "section": "4.2 Serial computing",
    "text": "4.2 Serial computing\n\n\n\nserial computing"
  },
  {
    "objectID": "chs-propositional/hpc-notions.html#parallel-computing",
    "href": "chs-propositional/hpc-notions.html#parallel-computing",
    "title": "4  Notions of HPC",
    "section": "4.3 Parallel computing",
    "text": "4.3 Parallel computing"
  },
  {
    "objectID": "chs-propositional/hpc-notions.html#computer-architectures",
    "href": "chs-propositional/hpc-notions.html#computer-architectures",
    "title": "4  Notions of HPC",
    "section": "4.4 Computer architectures",
    "text": "4.4 Computer architectures\n\n\n\n\nLaptop processor architecture\n\n\n\n\nHPC architecture"
  },
  {
    "objectID": "chs-propositional/hpc-notions.html#using-apolo-cluster-with-slurm",
    "href": "chs-propositional/hpc-notions.html#using-apolo-cluster-with-slurm",
    "title": "4  Notions of HPC",
    "section": "4.5 Using Apolo cluster with Slurm",
    "text": "4.5 Using Apolo cluster with Slurm\n\nSlurm is a job manager scheduler. It brings order to the jobs sent by users of the clusters and facilitate the process of check the state of the job in the cluster and the actual state of the cluster itself. To do so it has basically three main commands. The first one is sinfo"
  },
  {
    "objectID": "chs-propositional/hpc-notions.html#the-slurm-instructions",
    "href": "chs-propositional/hpc-notions.html#the-slurm-instructions",
    "title": "4  Notions of HPC",
    "section": "4.6 The Slurm instructions",
    "text": "4.6 The Slurm instructions\nTo send then a job into the computer cluster several instructions should be specified so that the appropriate scheduling take part Fig. 4.1\n\n\n\nFigure 4.1: Slurm specifications to send a job into the cluster service"
  },
  {
    "objectID": "chs-predicate/algorithm-thinking.html#what-is-an-algorithm",
    "href": "chs-predicate/algorithm-thinking.html#what-is-an-algorithm",
    "title": "5  Algorithm thinking",
    "section": "5.1 What is an algorithm",
    "text": "5.1 What is an algorithm"
  },
  {
    "objectID": "chs-predicate/algorithm-thinking.html#solving-a-problem-step-by-step",
    "href": "chs-predicate/algorithm-thinking.html#solving-a-problem-step-by-step",
    "title": "5  Algorithm thinking",
    "section": "5.2 Solving a problem step by step",
    "text": "5.2 Solving a problem step by step"
  },
  {
    "objectID": "chs-predicate/algorithm-thinking.html#algorithms-in-computing",
    "href": "chs-predicate/algorithm-thinking.html#algorithms-in-computing",
    "title": "5  Algorithm thinking",
    "section": "5.3 Algorithms in computing",
    "text": "5.3 Algorithms in computing"
  },
  {
    "objectID": "chs-predicate/algorithm-thinking.html#relevance-in-biology",
    "href": "chs-predicate/algorithm-thinking.html#relevance-in-biology",
    "title": "5  Algorithm thinking",
    "section": "5.4 Relevance in biology",
    "text": "5.4 Relevance in biology"
  },
  {
    "objectID": "chs-predicate/algorithm-thinking.html#pseudocode-and-notations",
    "href": "chs-predicate/algorithm-thinking.html#pseudocode-and-notations",
    "title": "5  Algorithm thinking",
    "section": "5.5 Pseudocode and notations",
    "text": "5.5 Pseudocode and notations"
  },
  {
    "objectID": "chs-predicate/algorithm-techniques.html#complexity",
    "href": "chs-predicate/algorithm-techniques.html#complexity",
    "title": "6  Algorithm techniques",
    "section": "6.1 Complexity",
    "text": "6.1 Complexity"
  },
  {
    "objectID": "chs-predicate/algorithm-techniques.html#exhaustive-search",
    "href": "chs-predicate/algorithm-techniques.html#exhaustive-search",
    "title": "6  Algorithm techniques",
    "section": "6.2 Exhaustive search",
    "text": "6.2 Exhaustive search"
  },
  {
    "objectID": "chs-predicate/algorithm-techniques.html#branch-and-bound",
    "href": "chs-predicate/algorithm-techniques.html#branch-and-bound",
    "title": "6  Algorithm techniques",
    "section": "6.3 Branch and bound",
    "text": "6.3 Branch and bound"
  },
  {
    "objectID": "chs-predicate/algorithm-techniques.html#dynamic-programming",
    "href": "chs-predicate/algorithm-techniques.html#dynamic-programming",
    "title": "6  Algorithm techniques",
    "section": "6.4 Dynamic programming",
    "text": "6.4 Dynamic programming"
  },
  {
    "objectID": "chs-predicate/algorithm-techniques.html#greedy-algorithm",
    "href": "chs-predicate/algorithm-techniques.html#greedy-algorithm",
    "title": "6  Algorithm techniques",
    "section": "6.5 Greedy algorithm",
    "text": "6.5 Greedy algorithm"
  },
  {
    "objectID": "chs-predicate/data-structures.html#accessing-data",
    "href": "chs-predicate/data-structures.html#accessing-data",
    "title": "7  Data structures",
    "section": "7.1 Accessing data",
    "text": "7.1 Accessing data"
  },
  {
    "objectID": "chs-predicate/data-structures.html#basic-data-structures",
    "href": "chs-predicate/data-structures.html#basic-data-structures",
    "title": "7  Data structures",
    "section": "7.2 Basic data structures",
    "text": "7.2 Basic data structures\n\n7.2.1 Hash tables\n\n\n7.2.2 Binary trees"
  },
  {
    "objectID": "chs-predicate/data-structures.html#ubiquitous-bioinformatic-data-structures",
    "href": "chs-predicate/data-structures.html#ubiquitous-bioinformatic-data-structures",
    "title": "7  Data structures",
    "section": "7.3 Ubiquitous bioinformatic data structures",
    "text": "7.3 Ubiquitous bioinformatic data structures\n\n7.3.1 Graphs\n\n\n7.3.2 Strings"
  },
  {
    "objectID": "chs-modal/introduction-to-sequence-analysis.html#biological-information",
    "href": "chs-modal/introduction-to-sequence-analysis.html#biological-information",
    "title": "8  Sequence analysis",
    "section": "\n8.1 Biological information",
    "text": "8.1 Biological information\nSince the origin, organisms (or molecules) have been the result of different selective processes. An emergent property of successive iterations of survival/decease was the ability of molecules to keep a record of its past in a very stable manner, so that it will pass generation to generation. Although this might not be the first property or molecule to ever exist (see the :origin of life), the innovation of organisms to pack information of previous events became so advantageous that almost any form of living organism has this property: that is DNA.\n\n\nThe different scales of information packed in a biological fashion. Figure adapted from Meneely et al. (2017) book showing how DNA in a eukaryote is packaged with chromosomal proteins to form the much more compact chromatin. Chromatin is then folded into higher-order structures and eventually into the chromosome\n\n\nAlmost any living organism harbor DNA in a nucleus or chromosome, which is a very compacted structure that could be actually seen to naked eye in some species. It so arranged or condensed ?fig-chromosome that it is the result of multiple compacting strategies."
  },
  {
    "objectID": "chs-modal/introduction-to-sequence-analysis.html#the-duality-of-dna",
    "href": "chs-modal/introduction-to-sequence-analysis.html#the-duality-of-dna",
    "title": "8  Sequence analysis",
    "section": "\n8.2 The duality of DNA",
    "text": "8.2 The duality of DNA\nDNA is an organic molecule of :nucleic acids that is mainly build out of nitrogen-containing compounds (:nucleobases) or just bases.The four bases are adenine (A), cytosine (C), guanine (G) and (T) and they bind strictly as \\(A=T\\) and \\(C\\equiv{G}\\) where each of the lines represents an hydrogen bond.\nDNA nitrogenous bases of are arranged in a very compacted helix structure and too much can be understood from its molecular nature. It is of course governed by the physicochemical properties of the atoms, therefore DNA is a physicochemical entity. But those common bricks have also a very beautiful emergent property that comes out from their order (mainly), and that is to keep the instructions that build the organism from which it belongs. These instructions are nothing else than information, which also follow some informational rules. Then DNA is also an informational entity.\n\n\nDNA double helix structure and main characteristics. Image adapted from Brown (2018) showing the structure with the sugar–phosphate backbone of each polynucleotide drawn as a gray ribbon with the base pairs in green\n\n\nThe description of DNA bases helped the elucidation of the helicoidal structure as well as the elucidation of the base pairing rules of the nucleotides Fig. 8.1, also called the Chargaff’s rules of base pairing. The first outstanding feature of the DNA structure was indeed highlighted by Watson and Crick in its famous paper about a subtle mechanism of replication. The\n\n\n\nA phosphodiester bond bind two nitrogenous bases as in the backbone of the DNA helix\n\nThis idea of the duality of the DNA (and of course of other biological molecules as well) is the source of the study of many bioinformatic fields. But a question remains open: how do we capture the informational nature of a DNA sequence so that we end up with a sequential file of characters ATCGCTATC.... This is not a trivial question in fact.\n\n\n\n\nGuanine and cytosine base pair\n\n\n\n \n\n\n\nAdenine and thymine base pair\n\n\n\nFigure 8.1: Most common nucleotides present in DNA and the chemical interactions that bond each pair."
  },
  {
    "objectID": "chs-modal/introduction-to-sequence-analysis.html#the-central-dogma-theory-of-molecular-biology-extended",
    "href": "chs-modal/introduction-to-sequence-analysis.html#the-central-dogma-theory-of-molecular-biology-extended",
    "title": "8  Sequence analysis",
    "section": "\n8.3 The central dogma theory of molecular biology extended",
    "text": "8.3 The central dogma theory of molecular biology extended\nSo far we have addressed that DNA is a very stable molecule that stores biological (i.e., evolutionary) information. Also, that DNA could represent a sequential object of characters as in a computer digital object or file as well. But how is it that this order has an underlying biological sense? This was a very though question that required the accumulation of many experimental discoveries and the meeting of genetics and molecular biology.\n\n\nAn extended representation of the central theory of molecular biology. Image from Mäkinen et al. (2015)"
  },
  {
    "objectID": "chs-modal/introduction-to-sequence-analysis.html#sequencing-strategies",
    "href": "chs-modal/introduction-to-sequence-analysis.html#sequencing-strategies",
    "title": "8  Sequence analysis",
    "section": "\n8.4 Sequencing strategies",
    "text": "8.4 Sequencing strategies"
  },
  {
    "objectID": "chs-modal/introduction-to-sequence-analysis.html#sequencing-over-time",
    "href": "chs-modal/introduction-to-sequence-analysis.html#sequencing-over-time",
    "title": "8  Sequence analysis",
    "section": "\n8.5 Sequencing over time",
    "text": "8.5 Sequencing over time"
  },
  {
    "objectID": "chs-modal/introduction-to-sequence-analysis.html#some-insights-from-sequencing-genomes",
    "href": "chs-modal/introduction-to-sequence-analysis.html#some-insights-from-sequencing-genomes",
    "title": "8  Sequence analysis",
    "section": "\n8.6 Some insights from sequencing genomes",
    "text": "8.6 Some insights from sequencing genomes"
  },
  {
    "objectID": "chs-modal/introduction-to-sequence-analysis.html#biological-information-databases",
    "href": "chs-modal/introduction-to-sequence-analysis.html#biological-information-databases",
    "title": "8  Sequence analysis",
    "section": "\n8.7 Biological information databases",
    "text": "8.7 Biological information databases"
  },
  {
    "objectID": "chs-modal/introduction-to-sequence-analysis.html#retrieving-data-from-ncbi",
    "href": "chs-modal/introduction-to-sequence-analysis.html#retrieving-data-from-ncbi",
    "title": "8  Sequence analysis",
    "section": "\n8.8 Retrieving data from NCBI",
    "text": "8.8 Retrieving data from NCBI\nInforation or databases inside the NCBI comes in many different ways. Perhaps the most used file format in bioinformatics is the FASTA format. It is a very simple format that consist of two lines, the header which is basically noted by starting with the &gt; symbol and is always preceding the sequence, that is present in the second line.\n\n\n\n\n\n\n FASTA\n\n\n\n&gt;sequence\nATCCCTAGCTAGCTCGCTATCGATCATCCCTAGCTAGCTCGCTATCGATCATCCCTAGCTAGCTCG...\n\n\n\n8.8.1 The manual way\n\n8.8.2 Entrez direct\nWe first need to install the Entrez Direct command line utilities. This could be done in several ways, one suggested by the manual and a very simple one using conda (mamba).\n\nmamba create -y –n entrez entrez\n\nThis line will create a new conda environment called entrez and will automatically install all dependencies. We later activate the environment with conda activate entrez and then we got the entire Entrez CLI utilities.\nThere are several commands and its function is to interact with the NCBI databases system. It is, however, a very huge set of utilities and commands to cope with at first, so the learning curve is somehow steppe. Here is a way to download the Bacillus tequilensis EA-CB0015 genome with a line of code that interleave three of the main commands of Entrez:\n\nesearch -db assembly -query GCF_012225885.1 |\nelink   -target nucleotide -name assembly_nuccore_refseq | \nefetch  -format fasta &gt; GCF_012225885.1.fasta\n\n\n8.8.3 Simpler download programs\nSince the manual way is clumsy when scaling and automating, and the entrez-direct utilities are somehow hard at first hand, some bioinformaticians have already thought ways to ease users the hard of knowing the NCBI internal database structure and to resume many of the utlities to just a ‘download’ command out from what in entrez is distributed in search, filter, and download commands.\nA very nice command to download genomes is the bit-dl-ncbi-assemblies from Mike Lee, who has also made a remarkable work to bring many bioiformatic knowledge to newcomers. Similarly and quite more robust is the ncbi-genome-download CLI (or abbreviated as ngd) developed by Kai Blin\nWhen navigating the NCBI databases some data is being curated and continuously updated by the execution of annotation tools. The refseq database is precisely the one that is more curated. For the case of genomes the accession number of those that belong to the refseq category are start with GCF ids, whereas the annotated genomes from the genbank category display the GCA ids\nUsing ngd to download a complete genome using the refeseq or genbank accession numbers, would be as easy as:\n\nngd --format fasta --flat-output -A GCF_002055965.1 bacteria\n\nThe one-line will download the refeseq genome of the Bacillus tequilenis EA-CB0015 in a fasta nucleotide format. the --flat-option from the script will handle out extra metadata of the search and will download strictly the data.\nIt is important to highlight that these simpler scripts are focused on genomic information, so that direct downloads of genes, proteins, transcripts, and many other kind of data must be done with entrez or other programs. Some recent efforts have been made to create a more robust CLI to interact with different databases, but in a very easy and intuitive way, such as the gget project. It is more focused on vertebrate databases, but also has a port to NCBI, UniProt and other databases. And is very simple. Here is an example to download all the isoforms in a multi-fasta format of the cancer-related gene BRCA2 in a human genome (GRCh38.p13):\n\ngget seq -iso -o BRCA2.fasta ENSG00000139618\n\nIt is establishing a connection with the Ensemble database, which is focused on vertebrate genome and transcriptome data.\n\n\n\n\n\n\n\nChallenge\n\n\n\nProfessor Camilo is interested on knowing how many complete genomes of Bacillus subtilis are there in the NCBI databases. He asks you later to count the number of features (genes, CDS, ncRNA, rRNA, etc.) in the genome of Bacillus subtilis NCIB 3610 (GCF_002055965.1). And tell you to document each of the steps and how did you end up with the answer. Saving the file with your initials (e.g., CG-activity01.md)\n\n\n\n\n\n\nBrown, T. A. (2018). Genomes 4. Garland science.\n\n\nMäkinen, V., Belazzougui, D., Cunial, F., & Tomescu, A. I. (2015). Genome-scale algorithm design. Cambridge University Press.\n\n\nMeneely, P. M., Hoang, R. D., Okeke, I. N., & Heston, K. (2017). Genetics: Genes, genomes, and evolution. Oxford University Press."
  },
  {
    "objectID": "chs-modal/sanger-analysis.html#the-first-sequencing-methods",
    "href": "chs-modal/sanger-analysis.html#the-first-sequencing-methods",
    "title": "9  Sanger analysis",
    "section": "\n9.1 The first sequencing methods",
    "text": "9.1 The first sequencing methods\nBack in 70s there two different methods aiming to determine the base sequences of DNA and they basically operated at the level of base per base reconstruction of the information. The most used during those days was so called :Maxam-Gilbert method and the second one was precisely the chain termination method or dideoxy sequencing or more commonly nowadays :Sanger sequencing. Both methods named after their creators. It was, however the Sanger method the one that gradually became the facto method and continue to be the standard for the next thirty years. In fact, assembled genomes before the 2000s were sequenced with Sanger method, which included the first draft of the Human genome and many other organism Brown (2018).\n\n\n\nA globular structure of a bacterial DNA polymerase\n\n\n9.1.1 The chain termination method\nTo under stand the chain termination method is important have a clear view of the DNA structure and chemical reaction that enable its polymerization. Whe the\n\n\nThe deoxy-ribose and dideoxy-ribose and consequences on the polymerization of a DNA strand\n\n\n\n\n\nFigure 9.1: A step-by-step of the Sanger sequencing method or the chain termination method.\n\n\n9.1.2 Sanger with capillary electrophoresis\n\n9.1.3 Strengths and limitations of Sanger methods"
  },
  {
    "objectID": "chs-modal/sanger-analysis.html#files-from-sanger-sequencing",
    "href": "chs-modal/sanger-analysis.html#files-from-sanger-sequencing",
    "title": "9  Sanger analysis",
    "section": "\n9.2 Files from Sanger sequencing",
    "text": "9.2 Files from Sanger sequencing\nSeveral files are generated from a modern Sanger sequencing project.\n\n\n\n\n\n\n PHD.1\n\n\n\nBEGIN_SEQUENCE H200824-010_A11_455-WT_spo0B_spo0B-R\n\nBEGIN_COMMENT\n\nCHROMAT_FILE: H200824-010_A11_455-WT_spo0B_spo0B-R\nBASECALLER_VERSION: KB 1.4.0\nTRACE_PROCESSOR_VERSION: KB 1.4.0\nQUALITY_LEVELS: 99\nTIME: Mon Aug 24 22:05:23 2020\nTRACE_ARRAY_MIN_INDEX: 0\nTRACE_ARRAY_MAX_INDEX: 18141\nTRIM: -1 -1 -1.000000e+000\nTRACE_PEAK_AREA_RATIO: -1.000000e+000\nCHEM: term\nDYE: big\n\nEND_COMMENT\n\nBEGIN_DNA\nC 7 3\nC 2 17\nT 3 44\n…\nEND_DNA\n\nEND_SEQUENCE\n\n\nHowever the most used file is the binary version AB1 which could be red out from different programs including cutepeaks. It displays the DNA sequence along with its quality peak in each position ?fig-ab1-trace\n\n\nA graphic of the AB1 file format from a Sanger sequencing project displayed in cutepeaks software"
  },
  {
    "objectID": "chs-modal/sanger-analysis.html#sanger-processing-workflow",
    "href": "chs-modal/sanger-analysis.html#sanger-processing-workflow",
    "title": "9  Sanger analysis",
    "section": "\n9.3 Sanger processing workflow",
    "text": "9.3 Sanger processing workflow\n\nDespite being one of the oldest sequencing methods, Sanger sequencing has some remarkable strengths that are enable thanks to the automation era. For instance modern sequencers working in parallel can read almost 384 different sequences (of 750bp) in 1h (7Mb in 24h per machine), clearly automation introduces a second advantage and that is the low-price of sequencing small fragments Brown (2018). It is important to highlight some limitations as well like the necessity of round-the-clock technical support (this also leverages a little bit from robotic operators though). The error-free Sanger sequencing requires at least 5X of sample coverage, which could be seen as disadvantage too Brown (2018)."
  },
  {
    "objectID": "chs-modal/sanger-analysis.html#the-16s-rrna-and-its-relevance-for-sequencing",
    "href": "chs-modal/sanger-analysis.html#the-16s-rrna-and-its-relevance-for-sequencing",
    "title": "9  Sanger analysis",
    "section": "\n9.4 The 16S rRNA and its relevance for sequencing",
    "text": "9.4 The 16S rRNA and its relevance for sequencing\n\n\n\nBacillus subtilis subsp. subtilis str. 168 bacterial SSU 16S rRNA\n\n\n\n\n\n\n\nChallenge\n\n\n\nProfessor Valeska gives you a compressed file containing two genes (spo0B and rpoB) from three different strains (302, 321, 455). These genes were sequenced using pair end Sanger method, then the compressed file has the two raw sequences per gene. She tells you to process and analyse them using the Sanger sequencing pipeline analyis. Since she doesn’t know from which species they belong, she ask you to identify the organism to whom it belongs by using the resulting consensus sequence. She finally reminds you to document each step of the process including the identification step\nSee the solution :here\n\n\n\n\n\n\nBrown, T. A. (2018). Genomes 4. Garland science."
  },
  {
    "objectID": "chs-modal/sequence-alignments.html#why-do-we-align-sequences",
    "href": "chs-modal/sequence-alignments.html#why-do-we-align-sequences",
    "title": "10  Sequence alignments",
    "section": "10.1 Why do we align sequences?",
    "text": "10.1 Why do we align sequences?\nIn search of homology and identity"
  },
  {
    "objectID": "chs-modal/sequence-alignments.html#what-is-homology",
    "href": "chs-modal/sequence-alignments.html#what-is-homology",
    "title": "10  Sequence alignments",
    "section": "10.2 What is homology",
    "text": "10.2 What is homology"
  },
  {
    "objectID": "chs-modal/sequence-alignments.html#pairwise-alignments-algorithms",
    "href": "chs-modal/sequence-alignments.html#pairwise-alignments-algorithms",
    "title": "10  Sequence alignments",
    "section": "10.3 Pairwise alignments algorithms",
    "text": "10.3 Pairwise alignments algorithms\n\n10.3.1 Hamming distance\n\n\n10.3.2 Edit distance\n\n10.3.2.1 Dynamic programming\n\n\n\n10.3.3 Needleman-Wunsch (global alignment)\n\n\n10.3.4 Smith-Waterman (local alignment)"
  },
  {
    "objectID": "chs-modal/sequence-alignments.html#the-genetic-code-and-scoring-matrices",
    "href": "chs-modal/sequence-alignments.html#the-genetic-code-and-scoring-matrices",
    "title": "10  Sequence alignments",
    "section": "10.4 The genetic code and Scoring matrices",
    "text": "10.4 The genetic code and Scoring matrices"
  },
  {
    "objectID": "chs-modal/sequence-alignments.html#blast-and-its-families",
    "href": "chs-modal/sequence-alignments.html#blast-and-its-families",
    "title": "10  Sequence alignments",
    "section": "10.5 BLAST and its families",
    "text": "10.5 BLAST and its families\npsi-blast? true homologous, recurrent blast to polish scoring matrix during several generations to generate true homologous"
  },
  {
    "objectID": "chs-modal/sequence-alignments.html#multiple-sequence-alignments",
    "href": "chs-modal/sequence-alignments.html#multiple-sequence-alignments",
    "title": "10  Sequence alignments",
    "section": "10.6 Multiple sequence alignments",
    "text": "10.6 Multiple sequence alignments\n\n\n\n\n\n\nChallenge\n\n\n\nYour professor is working with species from genus Bacillus and want to align an orthologous gene from 10 genomes of different isolates. He gives you the GenBank accession number of these isolates and ask you to select one orthologous gene (Nucleotide seq) that you consider might be useful to differentiate the bacterial isolates and ask you to align those genes as you better consider. He finally ask you to document each step and send him the sequence alignment file in FASTA format along with the sequence alignment general stats in a TXT file (length, number of each nucleotides and other stats you consider important).\nAccessions: GCA_012225885.1, GCA_000196735.1, GCA_000742895.1, GCA_001584335.1, GCA_000007825.1, GCA_000832905.1, GCA_000008425.1, GCA_000507105.1, GCA_000832605.1, GCA_900186955.1"
  },
  {
    "objectID": "chs-modal/NGS-TGS-principles.html#platforms-yields",
    "href": "chs-modal/NGS-TGS-principles.html#platforms-yields",
    "title": "11  NGS and TGS: principles",
    "section": "11.1 Platforms yields",
    "text": "11.1 Platforms yields"
  },
  {
    "objectID": "chs-modal/NGS-TGS-principles.html#reads-main-differences",
    "href": "chs-modal/NGS-TGS-principles.html#reads-main-differences",
    "title": "11  NGS and TGS: principles",
    "section": "11.2 Reads main differences",
    "text": "11.2 Reads main differences"
  },
  {
    "objectID": "chs-modal/NGS-TGS-principles.html#illumina-principle-sequencing-by-synthesis",
    "href": "chs-modal/NGS-TGS-principles.html#illumina-principle-sequencing-by-synthesis",
    "title": "11  NGS and TGS: principles",
    "section": "11.3 Illumina principle (sequencing by synthesis)",
    "text": "11.3 Illumina principle (sequencing by synthesis)\n\n11.3.1 The fastq format\n\n\n11.3.2 Quality assesment of Illumina"
  },
  {
    "objectID": "chs-modal/NGS-TGS-principles.html#pacbio-principle-sequencing-by-incorporation",
    "href": "chs-modal/NGS-TGS-principles.html#pacbio-principle-sequencing-by-incorporation",
    "title": "11  NGS and TGS: principles",
    "section": "11.4 PacBio principle (sequencing by incorporation)",
    "text": "11.4 PacBio principle (sequencing by incorporation)\n\n11.4.1 Throughput evolution\n\n\n11.4.2 Quality assesment of PacBio"
  },
  {
    "objectID": "chs-modal/NGS-TGS-principles.html#oxford-nanopore-technology-ont-principle",
    "href": "chs-modal/NGS-TGS-principles.html#oxford-nanopore-technology-ont-principle",
    "title": "11  NGS and TGS: principles",
    "section": "11.5 Oxford Nanopore Technology (ONT) principle",
    "text": "11.5 Oxford Nanopore Technology (ONT) principle\n\n11.5.1 Platforms\n\n\n11.5.2 The fast5 file format"
  },
  {
    "objectID": "chs-intuitionistic/phylogenetic-reconstructions.html#what-is-a-phylogenetic-tree",
    "href": "chs-intuitionistic/phylogenetic-reconstructions.html#what-is-a-phylogenetic-tree",
    "title": "12  Phylogenetics",
    "section": "12.1 What is a phylogenetic tree",
    "text": "12.1 What is a phylogenetic tree"
  },
  {
    "objectID": "chs-intuitionistic/phylogenetic-reconstructions.html#mehtods-for-phylogenetic-reconstruction",
    "href": "chs-intuitionistic/phylogenetic-reconstructions.html#mehtods-for-phylogenetic-reconstruction",
    "title": "12  Phylogenetics",
    "section": "12.2 Mehtods for phylogenetic reconstruction",
    "text": "12.2 Mehtods for phylogenetic reconstruction"
  },
  {
    "objectID": "chs-intuitionistic/phylogenetic-reconstructions.html#building-a-phylogenetic-reconstruction",
    "href": "chs-intuitionistic/phylogenetic-reconstructions.html#building-a-phylogenetic-reconstruction",
    "title": "12  Phylogenetics",
    "section": "12.3 Building a phylogenetic reconstruction",
    "text": "12.3 Building a phylogenetic reconstruction\n\n12.3.1 Evolutionary substitution model\n\n\n12.3.2 Maximum likelihood\n\n\n12.3.3 Bayesian inference"
  },
  {
    "objectID": "chs-meta/genome-assembly.html#the-problem-of-assembling-genomes",
    "href": "chs-meta/genome-assembly.html#the-problem-of-assembling-genomes",
    "title": "14  Genome assembly",
    "section": "14.1 The problem of assembling genomes",
    "text": "14.1 The problem of assembling genomes"
  },
  {
    "objectID": "chs-meta/genome-assembly.html#main-algorithms-for-genome-asssembly",
    "href": "chs-meta/genome-assembly.html#main-algorithms-for-genome-asssembly",
    "title": "14  Genome assembly",
    "section": "14.2 Main algorithms for genome asssembly",
    "text": "14.2 Main algorithms for genome asssembly\n\n14.2.1 Overlay, Layout, Consensus (OLS)\n\n\n14.2.2 De Bruijn graphs"
  },
  {
    "objectID": "chs-meta/genome-assembly.html#main-concepts-of-an-assembly",
    "href": "chs-meta/genome-assembly.html#main-concepts-of-an-assembly",
    "title": "14  Genome assembly",
    "section": "14.3 Main concepts of an assembly",
    "text": "14.3 Main concepts of an assembly\n\n14.3.1 Contigs, Unitigs, Scaffolds"
  },
  {
    "objectID": "chs-meta/genome-assembly.html#a-complete-workflow-for-assembling-genomes",
    "href": "chs-meta/genome-assembly.html#a-complete-workflow-for-assembling-genomes",
    "title": "14  Genome assembly",
    "section": "14.4 A complete workflow for assembling genomes",
    "text": "14.4 A complete workflow for assembling genomes"
  },
  {
    "objectID": "chs-meta/genome-assembly.html#assessing-genomes",
    "href": "chs-meta/genome-assembly.html#assessing-genomes",
    "title": "14  Genome assembly",
    "section": "14.5 Assessing genomes",
    "text": "14.5 Assessing genomes\n\n14.5.1 Inspecting genome graphs\n\n\n14.5.2 Genome completeness"
  },
  {
    "objectID": "chs-meta/genome-assembly.html#understanding-genome-difficulties",
    "href": "chs-meta/genome-assembly.html#understanding-genome-difficulties",
    "title": "14  Genome assembly",
    "section": "14.6 Understanding genome difficulties",
    "text": "14.6 Understanding genome difficulties\n\nEnd of chromosomes\nErros\nLack of coverage\nHeterozigozity\nrepeats"
  },
  {
    "objectID": "chs-meta/genome-annotation.html#ab-initio-annotation",
    "href": "chs-meta/genome-annotation.html#ab-initio-annotation",
    "title": "15  Genome annotation",
    "section": "15.1 ab initio annotation",
    "text": "15.1 ab initio annotation"
  },
  {
    "objectID": "chs-meta/genome-annotation.html#homology-annotation",
    "href": "chs-meta/genome-annotation.html#homology-annotation",
    "title": "15  Genome annotation",
    "section": "15.2 Homology annotation",
    "text": "15.2 Homology annotation"
  },
  {
    "objectID": "chs-meta/genome-annotation.html#functional-annotations",
    "href": "chs-meta/genome-annotation.html#functional-annotations",
    "title": "15  Genome annotation",
    "section": "15.3 Functional annotations",
    "text": "15.3 Functional annotations\n\n15.3.1 Gene Ontology\n\n\n15.3.2 Cluster of orthologous genes\n\n\n15.3.3 Enzyme commission\nKEGG enrichment"
  },
  {
    "objectID": "chs-meta/genome-annotation.html#annotation-files",
    "href": "chs-meta/genome-annotation.html#annotation-files",
    "title": "15  Genome annotation",
    "section": "15.4 Annotation files",
    "text": "15.4 Annotation files\n\n15.4.1 the GBK and GBFF\n\n\n15.4.2 The GFF specifications"
  },
  {
    "objectID": "chs-meta/genome-annotation.html#visualizing-genomes-and-annotations",
    "href": "chs-meta/genome-annotation.html#visualizing-genomes-and-annotations",
    "title": "15  Genome annotation",
    "section": "15.5 Visualizing genomes and annotations",
    "text": "15.5 Visualizing genomes and annotations"
  },
  {
    "objectID": "chs-meta/variant-calling-analysis.html#common-mutations",
    "href": "chs-meta/variant-calling-analysis.html#common-mutations",
    "title": "16  Variant calling analysis",
    "section": "16.1 Common mutations",
    "text": "16.1 Common mutations"
  },
  {
    "objectID": "chs-meta/variant-calling-analysis.html#structural-variants",
    "href": "chs-meta/variant-calling-analysis.html#structural-variants",
    "title": "16  Variant calling analysis",
    "section": "16.2 Structural variants",
    "text": "16.2 Structural variants"
  },
  {
    "objectID": "chs-meta/variant-calling-analysis.html#genome-rearrangements",
    "href": "chs-meta/variant-calling-analysis.html#genome-rearrangements",
    "title": "16  Variant calling analysis",
    "section": "16.3 Genome rearrangements",
    "text": "16.3 Genome rearrangements"
  },
  {
    "objectID": "chs-meta/variant-calling-analysis.html#read-mapping-algorithms-and-programs",
    "href": "chs-meta/variant-calling-analysis.html#read-mapping-algorithms-and-programs",
    "title": "16  Variant calling analysis",
    "section": "16.4 Read mapping algorithms and programs",
    "text": "16.4 Read mapping algorithms and programs\n\n16.4.1 Burrow-Wheeler-Alignment\n\n\n16.4.2 BWA-MEM2\n\n\n16.4.3 Minimap2\n\n\n16.4.4 SAM, BAM and CRAM formats"
  },
  {
    "objectID": "chs-meta/variant-calling-analysis.html#identifying-mutations",
    "href": "chs-meta/variant-calling-analysis.html#identifying-mutations",
    "title": "16  Variant calling analysis",
    "section": "16.5 Identifying mutations",
    "text": "16.5 Identifying mutations\n\n16.5.1 Freebayes and Snippy\n\n\n16.5.2 The VCF file"
  },
  {
    "objectID": "chs-meta/comparative-genomics.html#genome-mapping",
    "href": "chs-meta/comparative-genomics.html#genome-mapping",
    "title": "17  Comparative genomics",
    "section": "17.1 Genome mapping",
    "text": "17.1 Genome mapping"
  },
  {
    "objectID": "chs-meta/comparative-genomics.html#whole-genome-comparisons",
    "href": "chs-meta/comparative-genomics.html#whole-genome-comparisons",
    "title": "17  Comparative genomics",
    "section": "17.2 Whole genome comparisons",
    "text": "17.2 Whole genome comparisons\nmummer mauve mmseq\narrow diagrams"
  },
  {
    "objectID": "chs-application/metagenomic-sequencing.html#designing-the-experiment",
    "href": "chs-application/metagenomic-sequencing.html#designing-the-experiment",
    "title": "18  Metagenomic sequencing",
    "section": "18.1 Designing the experiment",
    "text": "18.1 Designing the experiment\nStablish the basic experimental unit and the appropriate replicates, control, randomization!\nIt is important to have metadata of the experiment in a plant microbial community is common to have pH, geo-reference, temperature, etc.\nIn metataxonomic we analyses hypervariable regions (V3-V4) and compare relative abundance to identify which is the most informative (abundance, richness)"
  },
  {
    "objectID": "chs-application/metagenomic-sequencing.html#dna-extraction-and-sequencing-illumina",
    "href": "chs-application/metagenomic-sequencing.html#dna-extraction-and-sequencing-illumina",
    "title": "18  Metagenomic sequencing",
    "section": "18.2 DNA extraction and Sequencing (Illumina)",
    "text": "18.2 DNA extraction and Sequencing (Illumina)\n\nFollowed common sequencing is also important to make quality check of the data"
  },
  {
    "objectID": "chs-application/metagenomic-sequencing.html#denoising",
    "href": "chs-application/metagenomic-sequencing.html#denoising",
    "title": "18  Metagenomic sequencing",
    "section": "18.3 Denoising",
    "text": "18.3 Denoising\nThere are several way to define OTUs (97-99 % of similarity) for instance:\n\nIt is defined operational unit of species or species groups (be careful to assign a sequence as an species)\nTaxonomic level of sampling selected in the study… individual, population, species,…\n\nPipelines for OTUs or ASVs are Quimme and Silva and deNBI"
  },
  {
    "objectID": "chs-application/metagenomic-sequencing.html#chimera",
    "href": "chs-application/metagenomic-sequencing.html#chimera",
    "title": "18  Metagenomic sequencing",
    "section": "18.4 Chimera",
    "text": "18.4 Chimera\nReads that result from combinations in the sequencing"
  },
  {
    "objectID": "chs-application/metagenomic-sequencing.html#taxonomic-annotation",
    "href": "chs-application/metagenomic-sequencing.html#taxonomic-annotation",
    "title": "18  Metagenomic sequencing",
    "section": "18.5 Taxonomic annotation",
    "text": "18.5 Taxonomic annotation\nUsing Silva or deNBI"
  },
  {
    "objectID": "HISTORY.html#edition-0.0.11-2023-01-19",
    "href": "HISTORY.html#edition-0.0.11-2023-01-19",
    "title": "History",
    "section": "Edition 0.0.11 (2023-01-19)",
    "text": "Edition 0.0.11 (2023-01-19)\n\nAdding some quarto code annotations!\nNew chapter on algorithms\nAdd a challenge on genome assembly\nRendering with Q v.1.3"
  },
  {
    "objectID": "HISTORY.html#edition-0.0.10-2022-12-17",
    "href": "HISTORY.html#edition-0.0.10-2022-12-17",
    "title": "History",
    "section": "Edition 0.0.10 (2022-12-17)",
    "text": "Edition 0.0.10 (2022-12-17)\n\nUpdate book with new quarto and extension versions\nChallenge on sequence alignment\nExperimenting new covers\nSome typos cleaning\nChange giscus theme"
  },
  {
    "objectID": "HISTORY.html#edition-0.0.9-2022-09-08",
    "href": "HISTORY.html#edition-0.0.9-2022-09-08",
    "title": "History",
    "section": "Edition 0.0.9 (2022-09-08)",
    "text": "Edition 0.0.9 (2022-09-08)\n\nStarting the Sanger chapter\nMore on Seq. analysis\nKeep history on book and add dates\nChange the cover\nAdd new parts and chapters outlines (phylogenetics and metagenomics)\nNew challenges on seq analysis solved"
  },
  {
    "objectID": "HISTORY.html#ed.-0.0.8-2022-08-29",
    "href": "HISTORY.html#ed.-0.0.8-2022-08-29",
    "title": "History",
    "section": "Ed. 0.0.8 (2022-08-29)",
    "text": "Ed. 0.0.8 (2022-08-29)\n\nNew render w/ Quarto 1.1\nAdding more on sequence analysis\nIncluding new extension for videos\nImprove some images\nBook has now Giscus to enable discussions\nNew info on download genomics data\nNew foot page with license and more info"
  },
  {
    "objectID": "HISTORY.html#ed.-0.0.7-2022-08-19",
    "href": "HISTORY.html#ed.-0.0.7-2022-08-19",
    "title": "History",
    "section": "Ed. 0.0.7 (2022-08-19)",
    "text": "Ed. 0.0.7 (2022-08-19)\n\nChanges in git chapter\nMore images in different chapters\nStart using new filters : lightbox for images and nutshell for expandable explanations\nSome images in HPC chapter\nSome outlines in Package manager chapter\nSome paragraphs on the sequence analysis chapter\nAdditional challenges"
  },
  {
    "objectID": "HISTORY.html#ed.-0.0.6-2022-08-09",
    "href": "HISTORY.html#ed.-0.0.6-2022-08-09",
    "title": "History",
    "section": "Ed. 0.0.6 (2022-08-09)",
    "text": "Ed. 0.0.6 (2022-08-09)\n\nMore updates to CLI chapter.\nUpdate the Version Control chapter.\nDecoupled genome annotation section into separate chapter.\nAdd a motif search challenge\nAdd cover image\nMany typos corrected."
  },
  {
    "objectID": "HISTORY.html#ed.-0.0.5-2022-07-28",
    "href": "HISTORY.html#ed.-0.0.5-2022-07-28",
    "title": "History",
    "section": "Ed. 0.0.5 (2022-07-28)",
    "text": "Ed. 0.0.5 (2022-07-28)\n\nUpdate CLI chapter.\nDecoupled Seq analysis and Genomics into separate chapters.\nChapters were reorganized in its own dirs to make easier navigation. They also were renamed for later easier addition of other chapters.\nNew learning features using Quarto callouts. This will hopefully improve learning and enjoy the book.\nChapters sections will have numbering."
  },
  {
    "objectID": "HISTORY.html#ed.-0.0.4-2022-04-24",
    "href": "HISTORY.html#ed.-0.0.4-2022-04-24",
    "title": "History",
    "section": "Ed. 0.0.4 (2022-04-24)",
    "text": "Ed. 0.0.4 (2022-04-24)\n\nMinor typos and outline for the structural biology section\nStart improving crossreferences"
  },
  {
    "objectID": "HISTORY.html#ed.-0.0.3-2022-04-18",
    "href": "HISTORY.html#ed.-0.0.3-2022-04-18",
    "title": "History",
    "section": "Ed. 0.0.3 (2022-04-18)",
    "text": "Ed. 0.0.3 (2022-04-18)\n\nCitation and reference of the book is now almost complete"
  },
  {
    "objectID": "HISTORY.html#ed.-0.0.2-2022-04-17",
    "href": "HISTORY.html#ed.-0.0.2-2022-04-17",
    "title": "History",
    "section": "Ed. 0.0.2 (2022-04-17)",
    "text": "Ed. 0.0.2 (2022-04-17)\n\nThis Ed. includes more information of the book and author\nAdds DOI and Zenodo\nIncludes Social commenting"
  },
  {
    "objectID": "HISTORY.html#ed.-0.0.1-2022-04-12",
    "href": "HISTORY.html#ed.-0.0.1-2022-04-12",
    "title": "History",
    "section": "Ed. 0.0.1 (2022-04-12)",
    "text": "Ed. 0.0.1 (2022-04-12)\n\nThis preliminary Ed. contains the basic outline of the book\nContains the first draft solutions to challenges demos"
  },
  {
    "objectID": "references.html",
    "href": "references.html",
    "title": "References",
    "section": "",
    "text": "The Page: 🏄 ... Visitors 👀 ... Views; The Site: 🏄 ... Visitors 👀 ... Views.\n\n\n\n\n\n\nAllesina, S., & Wilmes, M. (2019). Computing skills for\nbiologists. https://doi.org/10.2307/j.ctvc77jrc\n\n\nBrandies, P. A., & Hogg, C. J. (2021). Ten simple rules for getting\nstarted with command-line bioinformatics. In PLoS Computational\nBiology (No. 2; Vol. 17, p. e1008645). Public Library of Science\nSan Francisco, CA USA.\n\n\nBrown, T. A. (2018). Genomes 4. Garland science.\n\n\nDudley, J. T., & Butte, A. J. (2009). A quick guide for developing\neffective bioinformatics programming skills. In PLOS computational\nbiology (No. 12; Vol. 5, p. e1000589). Public Library of Science\nSan Francisco, USA.\n\n\nMäkinen, V., Belazzougui, D., Cunial, F., & Tomescu, A. I. (2015).\nGenome-scale algorithm design. Cambridge University Press.\n\n\nMeneely, P. M., Hoang, R. D., Okeke, I. N., & Heston, K. (2017).\nGenetics: Genes, genomes, and evolution. Oxford University\nPress.\n\n\nPerkel, J. M. et al. (2021). Five reasons why researchers should learn\nto love the command line. Nature, 590(7844), 173–174."
  },
  {
    "objectID": "chs-intuitionistic/phylogenomics.html",
    "href": "chs-intuitionistic/phylogenomics.html",
    "title": "13  Phylogenomics",
    "section": "",
    "text": "The Page:  ... Visitors,  ... Views; The Site:  ...,  ...."
  }
]